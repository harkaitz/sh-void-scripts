#!/bin/sh -e
#L:
#L:  MIT License
#L:  
#l:  Bug reports, feature requests to gemini|https://harkadev.com/oss
#l:  Copyright (c) 2022 Harkaitz Agirre, harkaitz.aguirre@gmail.com
#L:
#L:  Permission is hereby granted, free of charge, to any person obtaining
#L:  a copy of this software and associated documentation files (the
#L:  "Software"), to deal in the Software without restriction, including
#L:  without limitation the rights to use, copy, modify, merge, publish,
#L:  distribute, sublicense, and/or sell copies of the Software, and to
#L:  permit persons to whom the Software is furnished to do so, subject to
#L:  the following conditions:
#L:
#L:  The above copyright notice and this permission notice shall be
#L:  included in all copies or substantial portions of the Software.
#L:
#L:  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#L:  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#L:  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#L:  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#L:  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#L:  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#L:  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##:
#h: Usage: $0 [-r SSH] ...
#h:
#h: Install base utilities and services I need for operating
#h: a server.
#h:
#h: ... i-all     : i-{nonfree,base,shell,clock5}.
#h:
#h: ... i-clock5  : Install `clock5` service.
#h: ... i-nonfree : Install nonfree repositories.
#h: ... i-base    : Base utilities such as `nano`, `wget`, ...
#h: ... i-shell   : Configure shell.
#h:
#h: ... i-chrony  : Install and enable chrony time daemon.
. hlog
. vrun
. hpkg
. hterm
. hmain
. hfile
. getsrc-user
. getsrc-upload
hvoid_server() {
    local OPTIND optopt= ssh= cmd=
    ## Parse command line arguments.
    while getopts "r:" optopt;do # OPTARG
        case $optopt in
            r)  local ssh="${OPTARG}";;
            \?) return 1;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    ## Upload files if specified.
    if test -n "${ssh}";then
        for cmd in "$@";do
            case "${cmd}" in
                i-clock5) clock5_upload "${ssh}";;
            esac
        done
        if test -n "${1}";then
            hsh -r "${ssh}" "$0" "$@"
            return 0
        fi
    fi
    ## Perform operations.
    for cmd in "$@";do
        case "${cmd}" in
            ##
            i-all)     nonfree_install
                       base_install
                       shell_install
                       clock5_install  ;;
                       
            ##
            i-clock5)  clock5_install  ;;
            ##
            i-nonfree) nonfree_install ;;
            i-base)    base_install    ;;
            i-shell)   shell_install   ;;
            ##
            i-chrony)  chrony_install  ;;
            ##
            *) hlog fatal "Invalid command: ${cmd}.";;
        esac
    done
}
hvoid_server_show_variables() {
    hterm vars LOCATION
}
hvoid_server_calc_variables() {
    LOCATION="${LOCATION:-Europe/Madrid}"
}
## -----------------------------------------------------------------------------
clock5_upload() {
    local src="`getsrc_user sh-clock5`"
    test -n "${src}"
    getsrc_upload "${src}" "${ssh}"
}
clock5_install() {
    local pwd="`pwd`"
    ## Install local.
    hlog info "Installing 'clock5' ..."
    local src="`getsrc_user -s sh-clock5`"
    test -n "${src}"
    cd "${src}"
    sudo make install PREFIX=/usr INITSYS=runit >/dev/null
    cd "${pwd}"
    hlog info "Enabling 'clock5' ..."
    if test ! -e /etc/runit/runsvdir/default/clock5;then
        vrun sudo ln -s /etc/sv/clock5 /etc/runit/runsvdir/default/clock5
    fi    
}
## -----------------------------------------------------------------------------
nonfree_install() {
    hlog info "Updating xbps ..."
    sudo xbps-install -y -S
    sudo xbps-install -y -u xbps
    sudo xbps-install -y -u
    hlog info "Installing 'nonfree' and 'multilib' libraries ..."
    hpkg -v                                               \
         -w /usr/share/xbps.d/10-repository-nonfree.conf  \
         -w /usr/share/xbps.d/10-repository-multilib.conf \
         -i                                               \
         %xbps "void-repo-nonfree" "void-repo-multilib"
}
base_install() {
    hlog info "Installing 'socklog' logging system ..."
    vrun sudo xbps-install -S -y socklog socklog-void
    if test ! -e /etc/runit/runsvdir/default/socklog-unix;then
        vrun sudo ln -s /etc/sv/socklog-unix /etc/runit/runsvdir/default/
    fi
    if test ! -e /etc/runit/runsvdir/default/;then
        vrun sudo ln -s /etc/sv/nanoklogd    /etc/runit/runsvdir/default/
    fi
    vrun sudo usermod -a -G socklog "`whoami`"
    hlog info "Installing base utilities ..."
    hpkg -w "which" -w "file" -w "bc" -w "busybox"  `: SH utils`       \
         -w "xlocate"                               `: PKG management` \
         -w "wget" -w "curl" -w "git"  -w "ssh"     `: Internet fetch` \
         -w "nano" -w "mg"                          `: Editors`        \
         -w "unzip" -w "bzip2" -w "xz" -w "tar" -w "7z" -w "bsdtar" -w "unrar" `: Archives` \
         -w "htop" -w "ncdu" -w "iotop" -w "pstree" `: Monitors`              \
         -w "dig" -w "nmap" -w "lsof" -w "netstat"  `: Network analysis`      \
         -w "qrencode" -w "jq" -w "hxselect"        `: Parsers and encoders`  \
         -w "openssl" -w "nc" -w "socat"            `: Network tunneling`     \
         -w "upnpc"                                 `: Network configuration` \
         -w "update-ca-certificates" -w "rngd"      `: System configuration`  \
         -w "iptables"                                                        \
         -w "killall"                                                         \
         -w "mdp"                                   `: Documentation`         \
         -w "pass" -w "gpg2" -w "pinentry-tty"      `: Password management`   \
         -i %xbps                               \
         which file bc busybox-huge             \
         xtools                                 \
         wget curl git  openssh                 \
         nano mg                                \
         unzip bzip2 xz tar p7zip bsdtar unrar  \
         htop ncdu iotop psmisc                 \
         bind-utils nmap lsof net-tools         \
         qrencode jq html-xml-utils             \
         openssl openbsd-netcat socat           \
         miniupnpc                              \
         ca-certificates rng-tools iptables     \
         psmisc                                 \
         mdp                                    \
         pass gnupg2  pinentry-tty
}
shell_install() {
    hlog info "Installing /etc/profile.d/{ps1.sh,aliases.sh} ..."
    hfile wrapper sudo /etc/profile.d/ps1.sh <<-EOF
	export PS1=': \\w\\n> '
	export PS2='>> '
	export TERM='xterm' # ST bug: Working terminal not supported.
	export PATH="\${HOME}/bin:\${PATH}"
	EOF
    hfile wrapper sudo /etc/profile.d/aliases.sh <<- EOF
	alias sudo='sudo PATH=\${PATH} DISPLAY=\${DISPLAY}'
	EOF
}
chrony_install() {
    hlog info "Installing chrony ..."
    hpkg -v -w "chronyd" -i %xbps "chrony"
    if test ! -e /etc/localtime;then
        sudo ln -sf "/usr/share/zoneinfo/${LOCATION}" "/etc/localtime"
    fi
}
## -----------------------------------------------------------------------------
python_install() {
    hpkg -vi -w "pip2" -w "pip" %xbps "python-pip" "python3-pip"
}
ruby_install() {
    hpkg -vi -w "gem" %xbps "ruby" "ruby-devel"
}
nodejs_install() {
    hpkg -vi -w "npm" %xbps "pnpm" %rpm "npm" %pacman "npm"
}
## -----------------------------------------------------------------------------
hvoid_server_calc_variables
hmain -f "hvoid-server" hvoid_server "$@"

