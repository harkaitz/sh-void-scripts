#!/bin/sh -e
#L:
#L:  MIT License
#L:  
#l:  Bug reports, feature requests to gemini|https://harkadev.com/oss
#l:  Copyright (c) 2022 Harkaitz Agirre, harkaitz.aguirre@gmail.com
#L:
#L:  Permission is hereby granted, free of charge, to any person obtaining
#L:  a copy of this software and associated documentation files (the
#L:  "Software"), to deal in the Software without restriction, including
#L:  without limitation the rights to use, copy, modify, merge, publish,
#L:  distribute, sublicense, and/or sell copies of the Software, and to
#L:  permit persons to whom the Software is furnished to do so, subject to
#L:  the following conditions:
#L:
#L:  The above copyright notice and this permission notice shall be
#L:  included in all copies or substantial portions of the Software.
#L:
#L:  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#L:  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#L:  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#L:  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#L:  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#L:  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#L:  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##:
#h: Usage: $0 ...
#h:
#h: Configure a `vhost,https` load balancer using `haproxy`. The
#h: service name is `https`. SSH certificated are searched for in
#h: `/etc/ssl/<domain>.cert`. List websites in `/etc/https.csv` with
#h: the following format:
#h:
#h:     > <domain>,<host>:<port>
#h:
#h: Subcommands:
#h:
#h: ... show          : Show configuration.
#h: ... domains       : Print configured domains.
#h: ... config        : Print `haproxy` configuration file.
#h: ... run           : Execute the service in foreground.
#h: ... install SSH|- : Install `https` service. (Only Void Linux).
#h: ... enable  SSH|- : Enable `https` service. (Only Void Linux).
#h: ... disable SSH|- : Disable `https` service. (Only Void Linux).
hvoid_https() {
    local cmd="$1"
    shift
    case "${cmd}" in
        show)    hvoid_https_show_variables               ;;
        domains) hvoid_https_domains                      ;;
        config)  hvoid_https_config                       ;;
        run)     hvoid_https_run                          ;;
        install) hvoid_https_install "$@"                 ;;
        enable)  hvoid_https_enable  "$@"                 ;;
        disable) hvoid_https_disable "$@"                 ;;
        *)       hlog fatal "Invalid subcommand: ${cmd}." ;;
    esac
}
hvoid_https_show_variables() {
    printf '%-20s : %s\n' HVOID_HTTPS_L "${HVOID_HTTPS_L}"
    printf '%-20s : %s\n' HTTPS_SERVICE "${HTTPS_SERVICE}"
    printf '%-20s : %s\n' HTTPS_MAPFILE "${HTTPS_MAPFILE}"
    printf '%-20s : %s\n' HAPROXY_PROG  "${HAPROXY_PROG}"
    printf '%-20s : %s\n' SUDO          "${SUDO}"
}
hvoid_https_calc_variables() {
    HVOID_HTTPS_L="/usr/bin/hvoid-https-l"
    HTTPS_SERVICE="https"
    HTTPS_MAPFILE="/etc/https.csv"
    HAPROXY_PROG="/usr/bin/haproxy"
    if test @"`whoami`" = @"root";then SUDO=; else SUDO=sudo; fi
}
## -----------------------------------------------------------------------------
hvoid_https_domains() {
    if test -f "${HTTPS_MAPFILE}";then
        sed -n 's|,.*||p' "${HTTPS_MAPFILE}"
    fi
}
hvoid_https_config() {
    local domains="`hvoid_https_domains`" d=
    cat <<-EOF
	## [HEADER]
	defaults
	    option accept-invalid-http-response
	    option accept-invalid-http-request
	frontend https-in
	    bind *:443
	    mode tcp
	    tcp-request inspect-delay 5s
	    tcp-request content accept if { req_ssl_hello_type 1 }
	EOF
    for d in ${domains};do
        local n="`echo "${d}" | sed 's|\.|-|g'`"
        printf '    use_backend proxy-%s if { req_ssl_sni -i %s }\n' "${n}" "${d}"
    done
    echo ""
    for d in ${domains};do
        local n="`echo "${d}" | sed 's|\.|-|g'`"
        local hp="`sed -n "s|^ *${d} *,||p" "${HTTPS_MAPFILE}"`"
        cat <<-EOF
	## [${d}]
	backend proxy-${n}
	    mode tcp
	    server loopback-for-tls abns@haproxy-${n} send-proxy-v2
	frontend https-${n}
	    mode http
	    bind abns@haproxy-${n} accept-proxy ssl crt /etc/ssl/${d}.cert force-tlsv12
	    use_backend backend-${n}
	backend backend-${n}
	    mode http
	    server ${n} ${hp}
	
	EOF
    done
}
hvoid_https_run() {
    hvoid_https_log "Creating /var/run/${HTTPS_SERVICE}/cfg ..."
    ${SUDO} mkdir -p "/var/run/${HTTPS_SERVICE}"
    hvoid_https_config | ${SUDO} tee "/var/run/${HTTPS_SERVICE}/cfg" >/dev/null
    exec ${SUDO} "${HAPROXY_PROG}" -W -f "/var/run/${HTTPS_SERVICE}/cfg"
}
hvoid_https_install() {
    if test ! @"${1:--}" = @"-";then
        hsh -r "${1}" "$0" install -
        return 0
    fi
    
    hvoid_https_log "Installing 'haproxy' ..."
    if test ! -e /usr/sbin/haproxy;then
        ${SUDO} xbps-install -Sy "haproxy"
    fi
    
    hvoid_https_log "Installing '${HVOID_HTTPS_L}' ..."
    ${SUDO} cp "$0" "${HVOID_HTTPS_L}"
    ${SUDO} chmod +x "${HVOID_HTTPS_L}"

    hvoid_https_log "Creating /var/run/${HTTPS_SERVICE} ..."
    ${SUDO} mkdir -p "/var/run/${HTTPS_SERVICE}"
    
    hvoid_https_log "Creating '/etc/sv/${HTTPS_SERVICE}/run' ..."
    ${SUDO} mkdir -p "/etc/sv/${HTTPS_SERVICE}"
    ${SUDO} tee "/etc/sv/${HTTPS_SERVICE}/run" >/dev/null <<-EOF
	#!/bin/sh
	set -e
	exec "${HVOID_HTTPS_L}" run
	EOF
    ${SUDO} chmod +x "/etc/sv/${HTTPS_SERVICE}/run"
}
hvoid_https_enable() {
    local l="/etc/runit/runsvdir/default/${HTTPS_SERVICE}"
    if test ! @"${1:--}" = @"-";then
        hsh -r "${1}" "$0" enable -
        return 0
    fi
    if test -e "${l}";then
        ${SUDO} sv restart "${HTTPS_SERVICE}"
    elif test ! -e "/etc/sv/${HTTPS_SERVICE}";then
        hvoid_https_err "Service 'https' not installed."
        return 1
    else
        ${SUDO} ln -vs "/etc/sv/${HTTPS_SERVICE}" "${l}"
    fi
}
hvoid_https_disable() {
    local l="/etc/runit/runsvdir/default/${HTTPS_SERVICE}"
    if test ! @"${1:--}" = @"-";then
        hsh -r "${1}" "$0" disable -
        return 0
    fi
    if test -e "${l}";then
        ${SUDO} sv down "${HTTPS_SERVICE}"
        ${SUDO} rm -vf "${l}"
    fi
}



## -----------------------------------------------------------------------------
hvoid_https_log() { echo "${SCRNAME}: $*" >&2;   }
hvoid_https_err() { hvoid_https_log "error: $*"; }
hvoid_https_calc_variables 
SCRNAME="`basename "$0" -l`"
if test @"${SCRNAME}" = @"hvoid-https";then
    case "${1}" in
        ''|-h|--help)
            sed -n 's/^ *#h: \{0,1\}//p' "$0" | sed "s|\\\$0|${SCRNAME}|g"
            echo ""
            sed -n 's/^ *#l: \{0,2\}//p' "$0"
            ;;
        *)
            hvoid_https "$@"
            ;;
    esac
fi
